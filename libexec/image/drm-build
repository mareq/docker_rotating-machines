#!/bin/bash

# constants
drm_program_name="${drm_program_name} ${0##*/drm-}"

# auxiliary function to print out usage help
function drm_usage()
{
    cat <<EOF
Creates new Docker image for "rotating machine".

Usage: ${drm_program_name} [options]

Options: (defaults in [brackets] after descriptions)

  --verbose                   produce verbose output

  -n, --dry-run               do not execute any docker commands

  -i, --image-name=<image>    name of docker image to be produced
                              [default: rotating-machine]

  -t, --image-tag=<tag>       tag of docker image to be produced
                              [default: latest]

  -x, --extra-args=<args>     any extra arguments to be passed to
                              docker run command when creating
                              new container
                              [default: <none>]

EOF
}

# parameter (default) values
drm_verbose=
drm_dry_run=
drm_image_name="rotating-machine"
drm_image_tag="latest"
drm_extra_args=""

# parse arguments
drm_options_short="hni:t:x:"
drm_options_long="help,verbose,dry-run,image-name:,image-tag:,extra-args:"
drm_options=`getopt -o "${drm_options_short}" -l "${drm_options_long}" -n "${drm_program_name}" -- "${@}"`
drm_options_err=${?}
eval set -- $drm_options
while true; do
  case "${1}" in
    -h | --help)
      drm_usage
      exit 0
      ;;
    --verbose)
      drm_verbose=true
      shift
      ;;
    -n | --dry-run)
      drm_dry_run=true
      shift 1
      ;;
    -i | --image-name)
      drm_image_name=${2}
      shift 2
      ;;
    --image-name=*)
      drm_image_name=`echo ${drm_arg} | sed "s/^--image-name=//"`
      shift 1
      ;;
    -t | --image-tag)
      drm_image_name=${2}
      shift 2
      ;;
    --image-tag=*)
      drm_image_tag=`echo ${drm_arg} | sed "s/^--image-tag=//"`
      shift 1
      ;;
    -x | --extra-args)
      drm_extra_args=${2}
      shift 2
      ;;
    --extra-args=*)
      drm_extra_args=`echo ${drm_arg} | sed "s/^--extra-args=//"`
      shift 1
      ;;
    --)
      shift
      break
      ;;
    *)
      echo
      drm_usage
      exit 1
      ;;
  esac
done
if [ ${drm_options_err} -ne 0 ]; then
  echo
  drm_usage
  exit 1
fi

# remove the image if it already exists
if docker images | grep "${drm_image_name}:${drm_image_tag}" > /dev/null 2> /dev/null; then
  if [ "x${drm_verbose}" != "x" ]; then
    echo "Removing image \"${drm_image_name}:${drm_image_tag}\""
  fi
  if [ "x${drm_dry_run}" == "x" ]; then
    docker rmi "${drm_image_name}:${drm_image_tag}"
  fi
fi

# create docker build directory with Dockerfile
drm_tempdir=`mktemp -d`
if [ "x${drm_verbose}" != "x" ]; then
  echo "Docker build directory: ${drm_tempdir}"
fi
cp ${drm_path_work}/Dockerfile ${drm_tempdir}/.

# add all enabled scripts
drm_scripts=( `find ${drm_path_work}/scripts/. -maxdepth 1 -not -type d -printf '%f\n' | sort` )
if [ ${#drm_scripts[@]} -ne 0 ]; then
  # script directory need to be created in container
  command="`cat <<EOF
# run additional build scripts
RUN mkdir /root/docker-scripts/
@@scripts@@
EOF
`"
  sed --in-place "s|@@scripts@@|`echo "${command}" | sed '{:q;N;s/\n/\\\\n/g;t q}'`|" ${drm_tempdir}/Dockerfile

  # all enabled scripts need to be added to container and executed during build
  for drm_script in "${drm_scripts[@]}"; do
    command="`cat <<EOF
ADD ./${drm_script} /root/docker-scripts/
RUN /root/docker-scripts/${drm_script}
@@scripts@@
EOF
`"
    sed --in-place "s|@@scripts@@|`echo "${command}" | sed '{:q;N;s/\n/\\\\n/g;t q}'`|" ${drm_tempdir}/Dockerfile
    cp ${drm_path_work}/scripts/${drm_script} ${drm_tempdir}/.
    if [ "x${drm_verbose}" != "x" ]; then
      echo "Added script: ${drm_script}"
    fi
  done
fi
# remove @@scripts@@ wildcard in Dockerfile
sed --in-place "s|@@scripts@@||" ${drm_tempdir}/Dockerfile

# build image
docker_build_command="docker build --rm=true --tag=\"${drm_image_name}:${drm_image_tag}\""
if [ "x${drm_extra_args}" != "x" ]; then
  docker_build_command="${docker_build_command} ${drm_extra_args}"
fi
docker_build_command="${docker_build_command} ${drm_tempdir}"
if [ "x${drm_verbose}" != "x" ]; then
  echo "Building image \"${drm_image_name}:${drm_image_tag}\": ${docker_build_command}"
fi
if [ "x${drm_dry_run}" == "x" ]; then
  eval "${docker_build_command}"
fi

# clean up
rm -rf ${drm_tempdir}


# vim: set ts=2 sw=2 et:


