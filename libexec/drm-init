#!/bin/bash

# constants
drm_program_name="${drm_program_name} ${0##*/drm-}"

# auxiliary function to print out usage help
function drm_usage()
{
    cat <<EOF
Initialize working directory.

Usage: ${drm_program_name}

Options:

  --verbose                   produce verbose output

  -n, --dry-run               do not execute any commands

EOF
}

# parameter (default) values
drm_verbose=
drm_dry_run=

# parse arguments
drm_options_short="hn"
drm_options_long="help,verbose,dry-run"
drm_options=`getopt -o "${drm_options_short}" -l "${drm_options_long}" -n "${drm_program_name}" -- "${@}"`
drm_options_err=${?}
eval set -- $drm_options
while true; do
  case "${1}" in
    -h | --help)
      drm_usage
      exit 0
      ;;
    --verbose)
      drm_verbose=true
      shift
      ;;
    -n | --dry-run)
      drm_dry_run=true
      shift 1
      ;;
    --)
      shift
      break
      ;;
    *)
      echo
      drm_usage
      exit 1
      ;;
  esac
done
if [ ${drm_options_err} -ne 0 ]; then
  echo
  drm_usage
  exit 1
fi

# private drm directory path
drm_path_drm_private="${drm_path_work}/${drm_dirname_drm_private}"

# check that the working directory is not yet initialized
if [ -d "${drm_path_work}/${drm_dirname_drm_private}" ]; then
  echo "${drm_program_name}: Working directory already initialized"
  exit 1
fi

# create private drm directory
if [ -a "${drm_path_work}/${drm_dirname_drm_private}" ]; then
  echo "${drm_program_name}: Can not initialize working directory: File already exists: ${drm_path_work}/${drm_dirname_drm_private}"
  exit 1
fi
drm_mkdir_command="mkdir ${drm_path_work}/${drm_dirname_drm_private}"
if [ "x${drm_verbose}" != "x" ]; then
  echo "${drm_program_name}: Creating DRM directory: ${drm_mkdir_command}"
fi
if [ "x${drm_dry_run}" == "x" ]; then
  eval "${drm_mkdir_command}"
fi

# write version tag file
drm_version_tag_command="echo ${drm_program_version} > ${drm_path_work}/${drm_dirname_drm_private}/version"
if [ "x${drm_verbose}" != "x" ]; then
  echo "${drm_program_name}: Writing version tag file: ${drm_version_tag_command}"
fi
if [ "x${drm_dry_run}" == "x" ]; then
  eval "${drm_version_tag_command}"
fi

# copy over available templates
drm_templates_command="cp -r ${drm_path_data}/templates ${drm_path_work}/${drm_dirname_drm_private}/."
if [ "x${drm_verbose}" != "x" ]; then
  echo "${drm_program_name}: Installing available templates: ${drm_templates_command}"
fi
if [ "x${drm_dry_run}" == "x" ]; then
  eval "${drm_templates_command}"
fi

# copy over available scripts
drm_scripts_command="cp -r ${drm_path_data}/scripts ${drm_path_work}/${drm_dirname_drm_private}/."
if [ "x${drm_verbose}" != "x" ]; then
  echo "${drm_program_name}: Installing available scripts: ${drm_scripts_command}"
fi
if [ "x${drm_dry_run}" == "x" ]; then
  eval "${drm_scripts_command}"
fi

# reset working directory to the default state
drm_reset_command="${drm_path_libexec}/drm-reset"
if [ "x${drm_verbose}" != "x" ]; then
  drm_reset_command="${drm_reset_command} --verbose"
fi
if [ "x${drm_dry_run}" == "x" ]; then
  drm_reset_command="${drm_reset_command} --dry-run"
fi
eval "${drm_reset_command}"


# vim: set ts=2 sw=2 et:


