#!/bin/bash

# constants
drm_program_name="${drm_program_name} ${0##*/drm-}"

# auxiliary function to print out usage help
function drm_usage()
{
    cat <<EOF
Creates new Docker container with given <container-name> accessible via SSH on local <ssh-port>.

Usage: ${drm_program_name} <container-name> <ssh-port> [options]

Options: (defaults in [brackets] after descriptions)

  --verbose                   produce verbose output

  -n, --dry-run               do not execute any docker commands

  -s, --shared-dir=<dir>      path to the host machine's directory
                              to be shared with container
                              [deafult: <none>]

  -m, --mount-point=<dir>     mount point on container's filesystem
                              shared directory will be mounted at
                              [deafult: /mnt]

  -i, --image-name=<image>    docker image to be used as template
                              for container creation
                              [default: rotating-machine]

  -t, --image-tag=<tag>       tag of docker image to be used as tempalte
                              for container creation
                              [default: latest]

  -x, --extra-args=<args>     any extra arguments to be passed to
                              docker run command when creating
                              new container
                              [default: <none>]

EOF
}

# parameter (default) values
drm_container_name=""
drm_container_name_regex="[a-zA-Z0-9_][a-zA-Z0-9_-]*"
drm_ssh_port=""
drm_ssh_port_regex="[0-9][0-9]*"
drm_verbose=
drm_dry_run=
drm_shared_dir=""
drm_mount_point="/mnt"
drm_image_name="rotating-machine"
drm_image_tag="latest"
drm_extra_args=""

# parse arguments
drm_options_short="hns:m:i:t:x:"
drm_options_long="help,verbose,dry-run,shared-dir:,mount-point:,image-name:,image-tag,extra-args:"
drm_options=`getopt -o "${drm_options_short}" -l "${drm_options_long}" -n "${drm_program_name}" -- "${@}"`
drm_options_err=${?}
eval set -- $drm_options
while true; do
  case "${1}" in
    -h | --help)
      drm_usage
      exit 0
      ;;
    --verbose)
      drm_verbose=true
      shift
      ;;
    -n | --dry-run)
      drm_dry_run=true
      shift 1
      ;;
    -s | --shared-dir)
      drm_shared_dir=${2}
      shift 2
      ;;
    --shared-dir=*)
      drm_shared_dir=`echo ${drm_arg} | sed "s/^--shared-dir=//"`
      shift 1
      ;;
    -m | --mount-point)
      drm_mount_point=${2}
      shift 2
      ;;
    --mount-point=*)
      drm_mount_point=`echo ${drm_arg} | sed "s/^--mount-point=//"`
      shift 1
      ;;
    -i | --image-name)
      drm_image_name=${2}
      shift 2
      ;;
    --image-name=*)
      drm_image_name=`echo ${drm_arg} | sed "s/^--image-name=//"`
      shift 1
      ;;
    -t | --image-tag)
      drm_image_name=${2}
      shift 2
      ;;
    --image-tag=*)
      drm_image_tag=`echo ${drm_arg} | sed "s/^--image-tag=//"`
      shift 1
      ;;
    -x | --extra-args)
      drm_extra_args=${2}
      shift 2
      ;;
    --extra-args=*)
      drm_extra_args=`echo ${drm_arg} | sed "s/^--extra-args=//"`
      shift 1
      ;;
    --)
      shift
      break
      ;;
    *)
      echo
      drm_usage
      exit 1
      ;;
  esac
done
if [ ${drm_options_err} -ne 0 ]; then
  echo
  drm_usage
  exit 1
fi

# container name
if [ ${#} -lt 1 ]; then
  echo "${drm_program_name}: Container name must be specified"
  echo
  drm_usage
  exit 1
fi
if echo ${1} | grep "^${drm_container_name_regex}"$ > /dev/null 2> /dev/null; then
  drm_container_name="${1}"
  shift
else
  echo "${drm_program_name}: Invalid container name: \"${1}\""
  echo "${drm_program_name}: Container name must match the regular expression: \"${drm_container_name_regex}\""
  exit 1
fi

# ssh port
if [ ${#} -lt 1 ]; then
  echo "${drm_program_name}: SSH port must be specified"
  echo
  drm_usage
  exit 1
fi
if echo ${1} | grep "^${drm_ssh_port_regex}"$ > /dev/null 2> /dev/null; then
  drm_ssh_port="${1}"
  shift
else
  echo "${drm_program_name}: Invalid SSH port: \"${1}\""
  echo "${drm_program_name}: SSH port must match the regular expression: \"${drm_ssh_port_regex}\""
  exit 1
fi

# create container
drm_docker_run_command="docker run --detach --name=\"${drm_container_name}\" --publish=${drm_ssh_port}:22"
if [ "x${drm_shared_dir}" != "x" ]; then
  drm_docker_run_command="${drm_docker_run_command} --volume=\"${drm_shared_dir}:${drm_mount_point}\""
fi
if [ "x${drm_extra_args}" != "x" ]; then
  drm_docker_run_command="${drm_docker_run_command} ${drm_extra_args}"
fi
drm_docker_run_command="${drm_docker_run_command} ${drm_image_name}:${drm_image_tag}"
if [ "x${drm_verbose}" != "x" ]; then
  echo "${drm_program_name}: Creating container \"${drm_container_name}\": ${drm_docker_run_command}"
fi
if [ "x${drm_dry_run}" == "x" ]; then
  eval "${drm_docker_run_command}"
fi


# vim: set ts=2 sw=2 et:


