#!/bin/bash

# auxiliary function to print out usage help
function drm_usage()
{
    cat <<EOF
Creates new Docker container with given <container-name> accessible via SSH on local <ssh-port>.

Usage: ${0} <container-name> <ssh-port> [options]

Options: (defaults in [brackets] after descriptions)

  --help                      print this help

  --version                   print version

  --verbose                   produce verbose output

  --dry-run                   do not execute any docker commands

  --shared-dir                path to the host machine's directory
                              to be shared with container
                              [deafult: <none>]

  --mount-point               mount point on container's filesystem
                              shared directory will be mounted at
                              [deafult: /mnt]

  --image-name                docker image to be used as template
                              for container creation
                              [default: rotating-machine]

  --image-tag                 tag of docker image to be used as tempalte
                              for container creation
                              [default: latest]

  --extra-args                any extra arguments to be passed to
                              docker run command when creating
                              new container
                              [default: <none>]

EOF
}

# <container-name> and <ssh-port> parameters
drm_container_name=""
drm_ssh_port=""
drm_help_only=
if [ ${#} -ge 2 ]; then
  drm_container_name="${1}"
  shift
  drm_ssh_port="${1}"
  shift
else
  drm_help_only=true
fi

# parameter (default) values
drm_verbose=
drm_dry_run=
drm_shared_dir=""
drm_mount_point="/mnt"
drm_image_name="rotating-machine"
drm_image_tag="latest"
drm_extra_args=""

# parse arguments
for drm_arg in "${@}"; do
  drm_arg_consumed=
  if echo ${drm_arg} | grep "^--help" > /dev/null 2> /dev/null; then
    drm_usage
    exit 0
  fi
  if echo ${drm_arg} | grep "^--version" > /dev/null 2> /dev/null; then
    echo "drm-start v0.2.0"
    exit 0
  fi
  if echo ${drm_arg} | grep "^--verbose" > /dev/null 2> /dev/null; then
    drm_verbose=true
    drm_arg_consumed=true
  fi
  if echo ${drm_arg} | grep "^--dry-run" > /dev/null 2> /dev/null; then
    drm_dry_run=true
    drm_arg_consumed=true
  fi
  if echo ${drm_arg} | grep "^--shared-dir" > /dev/null 2> /dev/null; then
    drm_shared_dir=`echo ${drm_arg} | sed "s/^--shared-dir=//"`
    drm_arg_consumed=true
  fi
  if echo ${drm_arg} | grep "^--mount-point" > /dev/null 2> /dev/null; then
    drm_mount_point=`echo ${drm_arg} | sed "s/^--mount-point=//"`
    drm_arg_consumed=true
  fi
  if echo ${drm_arg} | grep "^--image-name" > /dev/null 2> /dev/null; then
    drm_image_name=`echo ${drm_arg} | sed "s/^--image-name=//"`
    drm_arg_consumed=true
  fi
  if echo ${drm_arg} | grep "^--image-tag" > /dev/null 2> /dev/null; then
    drm_image_tag=`echo ${drm_arg} | sed "s/^--image-tag=//"`
    drm_arg_consumed=true
  fi
  if echo ${drm_arg} | grep "^--extra-args" > /dev/null 2> /dev/null; then
    drm_extra_args=`echo ${drm_arg} | sed "s/^--extra-args=//"`
    drm_arg_consumed=true
  fi
  if [ "x${drm_arg_consumed}" == "x" ]; then
    echo "Unknown argument: \"${drm_arg}\""
    echo
    drm_usage
    exit 1
  fi
done

# check arguments (<container-name> and <ssh-port> are required
# for anything more than help messages)
if [ "x${drm_help_only}" != "x" ]; then
  drm_usage
  exit 1
fi

# create container
drm_docker_run_command="docker run --detach --name=\"${drm_container_name}\" --publish=${drm_ssh_port}:22"
if [ "x${drm_shared_dir}" != "x" ]; then
  drm_docker_run_command="${drm_docker_run_command} --volume=\"${drm_shared_dir}:${drm_mount_point}\""
fi
if [ "x${drm_extra_args}" != "x" ]; then
  drm_docker_run_command="${drm_docker_run_command} ${drm_extra_args}"
fi
drm_docker_run_command="${drm_docker_run_command} ${drm_image_name}:${drm_image_tag}"
if [ "x${drm_verbose}" != "x" ]; then
  echo "Creating container \"${drm_container_name}\": ${drm_docker_run_command}"
fi
if [ "x${drm_dry_run}" == "x" ]; then
  eval "${drm_docker_run_command}"
fi


# vim: set ts=2 sw=2 et:


